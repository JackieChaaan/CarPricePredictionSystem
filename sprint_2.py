# -*- coding: utf-8 -*-
"""Sprint 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U4FDVYYOQ0F19RzY3_M1jGn4q_WCqXYF

#Sprint 2

###Split the data set for train and test
"""

#import train_test_split
from sklearn.model_selection import train_test_split

features = final_data.drop(columns=['Selling_Price'])
target = final_data['Selling_Price']

#normalize the data
from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
#Let's normalize the train dataset
X=scaler.fit_transform(features)

X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.3, random_state=42)

features

target

"""###Import Random forest Regression"""

#Install the RandomForestRegressor model to the sklearn
from sklearn.ensemble import RandomForestRegressor
#install the RandomForestRegressor
random=RandomForestRegressor()
#Let's fit the train data to the model
random.fit(X_train,y_train)
#Prediction to the test dataset
random_pred=random.predict(X_test)

X_train

y_train

X_test

y_test

random_pred

#Check the test score and train score to the RandomForestRegressor algorithm
print(f'The Test_accuracy: {random.score(X_test,y_test)*100:.2f}')
#Train score for the data
print(f'The Train_accuracy: {random.score(X_train,y_train)*100:.2f}')

#RandomForestRegressor algorithms mean_squared_error and r2_score
from sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error
mse=mean_squared_error(y_test,random_pred)
rmse=np.sqrt(mse)
print("Root_mean_squred_error RandomForestRegressor {:.4f}".format(rmse))
print("R2_score RandomForestRegressor {:4f}".format(r2_score(y_test,random_pred)))
print("mean_absolute_error RandomForestRegressor {:4f}".format(mean_absolute_error(y_test,random_pred)))

user_input_features = []

# Ask the user to input the features one by one
print("Enter the following details for prediction:")
for feature_name in features.columns:
    value = input(f"Enter {feature_name}: ")
    user_input_features.append(float(value))

# Convert the user input to a numpy array
user_input = np.array(user_input_features).reshape(1, -1)

# Use the trained model to predict based on user input
predicted_price = random.predict(user_input)
print(f"The predicted price based on the input is: {predicted_price[0]:.2f}")