# -*- coding: utf-8 -*-
"""Sprint 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U4FDVYYOQ0F19RzY3_M1jGn4q_WCqXYF

#Sprint 1
"""

#import necessory libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#import dataset
data=pd.read_csv('car data.csv')
data

#shape of the data
data.shape

"""301 rows and 9 coloumns"""

#Check the information of dataset
data.info()

#describe the dataset
data.describe()

"""#Data Preprocessing"""

#Checking Missing Values
data.isnull().sum()

#Correlation Matrix
corr=data.corr().style.background_gradient(cmap='gray')
corr

"""### **Visualization**"""

#Let's visualize the correlation matrix iin the seaborn
sns.set(rc={'figure.figsize':(15,10)})
sns.heatmap(data.corr(),annot=True,cmap='rainbow')

data.columns

#To visualize the year in the dataset
year=data['Year'].value_counts()
#to visualize the year in the seaborn barplot
ax=plt.axes()
#set the background color
ax.set(facecolor='yellow')
#set the figures size
sns.set(rc={'figure.figsize':(16,8)},style='darkgrid')
#set the title of the plot
ax.set_title("To visualize the which year most car sold",fontsize=32,fontweight=900)
#let's visualize the barplot
sns.barplot(x=year.index,y=year,palette='rainbow')
#on the x axis
plt.xlabel("Year")
#on the y_axis
plt.ylabel("Count")
#let's visualize the image
plt.show()

#Let's visualize the car names in the dataset
fuel_type=data['Fuel_Type'].value_counts()
#To visualize the top 20 car's sold
label=['Petrol','Diesel','CNG']
plt.figure(figsize=(16,9))
plt.pie(fuel_type,labels=label, autopct='%1.2f%%',explode=[0.03,0.05,0.07],colors=['green','yellow','orange'])
plt.title("To visualize the fuel_type in the dataset",fontsize=32,fontweight='bold')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Set the background color
ax = plt.axes()
ax.set(facecolor='red')

# Set the figure size
sns.set(rc={'figure.figsize': (8, 6)}, style='darkgrid')

# Set the title of the plot
ax.set_title("To visualize the Selling_type", fontsize=32, fontweight=900)

# Visualize the countplot
sns.countplot(data=data, x='Selling_type', palette='rainbow')

# Label the x-axis
plt.xlabel("Selling_type")

# Label the y-axis
plt.ylabel("Count")

# Visualize the plot
plt.show()

#Let's check the car model with selling price
car_selling_price=data[['Car_Name','Selling_Price']].groupby(['Car_Name','Selling_Price']).sum().reset_index().sort_values(by='Selling_Price',ascending=False)
import plotly.express as px
fig=px.histogram(car_selling_price,x='Car_Name',y='Selling_Price',title="To visualize the car model with selling price")
fig.update_layout(bargap=0.2,bargroupgap=0.1,
    plot_bgcolor='black')

fig.show()

"""## Data Cleaning"""

final_data=data.drop(['Car_Name'],axis=1)
final_data.info()

# checking the distribution of categorical data
print(data.Fuel_Type.value_counts())
print(data.Selling_type.value_counts())
print(data.Transmission.value_counts())

from sklearn.preprocessing import LabelEncoder

# Initialize the LabelEncoder
label_encoder = LabelEncoder()

# Fit and transform the "Fuel_Type" column
final_data['Fuel_Type'] = label_encoder.fit_transform(final_data['Fuel_Type'])

# Now, the "Fuel_Type" column is label encoded

final_data.head()

from sklearn.preprocessing import LabelEncoder

# Initialize the LabelEncoder
label_encoder = LabelEncoder()

# Fit and transform the "Fuel_Type" column
final_data['Selling_type'] = label_encoder.fit_transform(final_data['Selling_type'])

# Now, the "Fuel_Type" column is label encoded

final_data.head()

from sklearn.preprocessing import LabelEncoder

# Initialize the LabelEncoder
label_encoder = LabelEncoder()

# Fit and transform the "Fuel_Type" column
final_data['Transmission'] = label_encoder.fit_transform(final_data['Transmission'])

# Now, the "Fuel_Type" column is label encoded

#final data after label encoding
final_data.head()

import matplotlib.pyplot as plt

# Create a figure with subplots for each feature
fig, axes = plt.subplots(nrows=2, ncols=4, figsize=(15, 6))

# Create box plots for each feature
final_data['Year'].plot(kind='box', ax=axes[0, 0])
final_data['Present_Price'].plot(kind='box', ax=axes[0, 1])
final_data['Selling_Price'].plot(kind='box', ax=axes[0, 2])
final_data['Driven_kms'].plot(kind='box', ax=axes[0, 3])
final_data['Fuel_Type'].plot(kind='box', ax=axes[1, 0])
final_data['Selling_type'].plot(kind='box', ax=axes[1, 1])
final_data['Transmission'].plot(kind='box', ax=axes[1, 2])
final_data['Owner'].plot(kind='box', ax=axes[1, 3])

# Set titles for the subplots
axes[0, 0].set_title('Year')
axes[0, 1].set_title('Present Price')
axes[0, 2].set_title('Selling Price')
axes[0, 3].set_title('Kilometer Driven')
axes[1, 0].set_title('Fuel Type')
axes[1, 1].set_title('Selling Type')
axes[1, 2].set_title('Transmission Type')
axes[1, 3].set_title('Owner')

# Adjust the layout to prevent overlap
plt.tight_layout()

# Display the plots
plt.show()